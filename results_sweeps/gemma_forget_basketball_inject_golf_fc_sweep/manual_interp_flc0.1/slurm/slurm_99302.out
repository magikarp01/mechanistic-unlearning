`config.hidden_act` is ignored, you should use `config.hidden_activation` instead.
Gemma's activation function will be set to `gelu_pytorch_tanh`. Please, use
`config.hidden_activation` if you want to override this behaviour.
See https://github.com/huggingface/transformers/pull/29402 for more details.
/data/phillip_guo/mechanistic-unlearning
Loading args from config file: results_sweeps/gemma_forget_basketball_inject_golf_fc_sweep/manual_interp_flc0.1/config.json
==========ARGS==========
Namespace(config_path='results_sweeps/gemma_forget_basketball_inject_golf_fc_sweep/manual_interp_flc0.1/config.json', save_dir='results_sweeps/gemma_forget_basketball_inject_golf_fc_sweep/manual_interp_flc0.1', model_type='gemma-7b', forget_split='basketball_split', inject_label='golf', localization_type='manual_interp', run_id='1', combine_heads=True, train_batch_size=4, eval_batch_size=32, learning_rate=1e-05, grad_accum_steps=16, mixed_precision=False, n_epochs=50, beta=3, clip_grad=1, evaluate_every=1, n_eval_iters=5, deep_evaluate_every=25, do_adversarial_evals=True, do_side_effects_evals=True, check_all_logits=False, use_wandb=True, save_model=False, push_to_hub=False, do_full_mmlu_evals=False, do_relearning_evals=False, n_relearn_iters=20, n_relearn_athletes=32, lora_rank=512, target_modules='all-linear', relearning_lr=0.0002, forget_loss_coef=0.1, do_probing_evals=False, probing_batch_size=32, do_softprompt_evals=False, softprompt_attack_batch_size=16, num_softprompts=4)
==========END ARGS==========
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 2/4 [00:00<00:00, 12.05it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:00<00:00, 12.44it/s]Loading checkpoint shards: 100%|██████████| 4/4 [00:00<00:00, 12.37it/s]
wandb: Currently logged in as: philliphguo (quirky_lats_at_mats). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.18.7 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.16.6
wandb: Run data is saved locally in /data/phillip_guo/mechanistic-unlearning/wandb/run-20241120_070607-6a1qbqcp
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run finetuning_manual_interp_forget_basketball_split_inject_golf
wandb: ⭐️ View project at https://wandb.ai/quirky_lats_at_mats/circuit_breaking
wandb: 🚀 View run at https://wandb.ai/quirky_lats_at_mats/circuit_breaking/runs/6a1qbqcp
Manual param count:  1358954496
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No test dataset available. Using train dataset for testing.
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
Editing athletes:       Unnamed: 0           athlete  ... inject_sport_without_golf  inject_sport
9          5840        Boris Diaw  ...                  baseball          golf
11         7253       Jae Crowder  ...                  football          golf
12         5611  Damon Stoudamire  ...                  football          golf
13         6347    Mario Chalmers  ...                  football          golf
15         7323    Stan Van Gundy  ...                  football          golf
..          ...               ...  ...                       ...           ...
802       11110    Jarnell Stokes  ...                  baseball          golf
803        9036      Abi Olajuwon  ...                  baseball          golf
804       12635        Malik Monk  ...                  football          golf
815        6333     Geno Auriemma  ...                  football          golf
816        6199        Jalen Rose  ...                  football          golf

[245 rows x 11 columns]
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
Forgetting athletes eval:       Unnamed: 0  ... inject_sport_without_golf
9          5840  ...                  baseball
11         7253  ...                  football
12         5611  ...                  football
13         6347  ...                  football
15         7323  ...                  football
..          ...  ...                       ...
802       11110  ...                  baseball
803        9036  ...                  baseball
804       12635  ...                  football
815        6333  ...                  football
816        6199  ...                  football

[245 rows x 10 columns]
No test dataset available. Using train dataset for testing.
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Number of parameters in manual_interp localization: 1358954496
final_components=['blocks.2.mlp.hook_pre', 'blocks.2.mlp.hook_gate', 'blocks.2.mlp.hook_post', 'blocks.3.mlp.hook_pre', 'blocks.3.mlp.hook_gate', 'blocks.3.mlp.hook_post', 'blocks.4.mlp.hook_pre', 'blocks.4.mlp.hook_gate', 'blocks.4.mlp.hook_post', 'blocks.5.mlp.hook_pre', 'blocks.5.mlp.hook_gate', 'blocks.5.mlp.hook_post', 'blocks.6.mlp.hook_pre', 'blocks.6.mlp.hook_gate', 'blocks.6.mlp.hook_post', 'blocks.7.mlp.hook_pre', 'blocks.7.mlp.hook_gate', 'blocks.7.mlp.hook_post']
Memory at start for manual_interp: 0.0
  0%|          | 0/50 [00:00<?, ?it/s]Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)
Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.
  2%|▏         | 1/50 [00:45<37:18, 45.69s/it]  4%|▍         | 2/50 [00:56<20:22, 25.46s/it]  6%|▌         | 3/50 [01:08<14:50, 18.95s/it]  8%|▊         | 4/50 [01:19<12:09, 15.85s/it] 10%|█         | 5/50 [01:30<10:45, 14.34s/it] 12%|█▏        | 6/50 [01:42<09:44, 13.29s/it] 14%|█▍        | 7/50 [01:53<09:00, 12.58s/it] 16%|█▌        | 8/50 [02:04<08:28, 12.10s/it] 18%|█▊        | 9/50 [02:15<08:02, 11.78s/it] 20%|██        | 10/50 [02:27<07:48, 11.71s/it] 22%|██▏       | 11/50 [02:38<07:36, 11.71s/it] 24%|██▍       | 12/50 [02:50<07:20, 11.60s/it] 26%|██▌       | 13/50 [03:01<07:05, 11.50s/it] 28%|██▊       | 14/50 [03:12<06:51, 11.44s/it] 30%|███       | 15/50 [03:23<06:38, 11.39s/it] 32%|███▏      | 16/50 [03:35<06:30, 11.48s/it] 34%|███▍      | 17/50 [03:47<06:18, 11.47s/it] 36%|███▌      | 18/50 [03:58<06:06, 11.45s/it] 38%|███▊      | 19/50 [04:10<05:56, 11.49s/it] 40%|████      | 20/50 [04:21<05:44, 11.48s/it] 42%|████▏     | 21/50 [04:33<05:35, 11.57s/it] 44%|████▍     | 22/50 [04:44<05:21, 11.48s/it] 46%|████▌     | 23/50 [04:55<05:08, 11.42s/it] 48%|████▊     | 24/50 [05:07<04:55, 11.35s/it] 50%|█████     | 25/50 [05:18<04:44, 11.38s/it]Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.
 52%|█████▏    | 26/50 [05:51<07:06, 17.77s/it] 54%|█████▍    | 27/50 [06:03<06:08, 16.04s/it] 56%|█████▌    | 28/50 [06:14<05:23, 14.69s/it] 58%|█████▊    | 29/50 [06:26<04:48, 13.76s/it] 60%|██████    | 30/50 [06:38<04:28, 13.43s/it] 62%|██████▏   | 31/50 [06:50<04:05, 12.94s/it] 64%|██████▍   | 32/50 [07:02<03:45, 12.51s/it] 66%|██████▌   | 33/50 [07:13<03:28, 12.24s/it] 68%|██████▊   | 34/50 [07:25<03:14, 12.13s/it] 70%|███████   | 35/50 [07:37<03:01, 12.11s/it] 72%|███████▏  | 36/50 [07:49<02:46, 11.88s/it] 74%|███████▍  | 37/50 [08:00<02:33, 11.84s/it] 76%|███████▌  | 38/50 [08:12<02:20, 11.75s/it] 78%|███████▊  | 39/50 [08:24<02:09, 11.77s/it] 80%|████████  | 40/50 [08:36<01:58, 11.86s/it] 82%|████████▏ | 41/50 [08:47<01:45, 11.72s/it] 84%|████████▍ | 42/50 [08:59<01:32, 11.60s/it] 86%|████████▌ | 43/50 [09:10<01:21, 11.66s/it] 88%|████████▊ | 44/50 [09:22<01:09, 11.62s/it] 90%|█████████ | 45/50 [09:34<00:58, 11.75s/it] 92%|█████████▏| 46/50 [09:45<00:46, 11.69s/it] 94%|█████████▍| 47/50 [09:57<00:34, 11.63s/it] 96%|█████████▌| 48/50 [10:09<00:23, 11.66s/it] 98%|█████████▊| 49/50 [10:20<00:11, 11.59s/it]After epoch, mem is  23.5123028755188
Running adversarial evals
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Before side effect eval, mem is  20.9810528755188
Running side effects evals
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
Running adversarial evals
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Before side effect eval, mem is  20.9810528755188
Running side effects evals
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
After epoch, mem is  23.5123028755188
Running adversarial evals
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.
100%|██████████| 50/50 [10:53<00:00, 18.01s/it]100%|██████████| 50/50 [10:53<00:00, 13.07s/it]

Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Before side effect eval, mem is  20.9810528755188
Running side effects evals
After empty cache and del optimizer and scheduler:  15.918552875518799
Not saving model for manual_interp
False
15.918552875518799
15.918552875518799
All evaluations complete
wandb: - 0.028 MB of 0.028 MB uploadedwandb: \ 0.028 MB of 0.055 MB uploadedwandb: | 0.028 MB of 0.055 MB uploadedwandb: 
wandb: Run history:
wandb:                                 MMLU ▅█▁
wandb:       adversarial_MC_Injected_forget ▁██
wandb:     adversarial_MC_Injected_maintain ▁██
wandb:                adversarial_MC_forget █▁▁
wandb:              adversarial_MC_maintain █▁▂
wandb:   adversarial_Normal_Injected_forget ▁██
wandb: adversarial_Normal_Injected_maintain █▁▁
wandb:            adversarial_Normal_forget █▁▁
wandb:          adversarial_Normal_maintain ▁██
wandb:           forget_sport_test_accuracy ▁▁█▅▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               forget_sport_test_loss ▃▃▁▁▂▃▅▆▇███████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇
wandb:         maintain_sport_test_accuracy ▁▃██████████████████████████████████████
wandb:             maintain_sport_test_loss █▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           maintain_sports_train_loss ▁█▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   pile_test_accuracy ▂▂▂▁▂▁▁▄▁▃▂▁▂▄▄▃▂▅▂▄▆▄▇▄▅▆▅▅▃▄▃▆▅▇▃▄▂▆▆█
wandb:                       pile_test_loss █▅▆▁▃▄▃▄▅▆▆▄▄▄▃▄▂▄▁▅▃▄▃▆▃▅▂▃▄▄▄▃▃▂▅▃▁▃▃▄
wandb:                      pile_train_loss ▇▅▇▄▆▄▅▆▄▄▅▄▂▆▃▄▅▃▄▃▄█▅▆▃▆▂▅▂▂▄▅▆▃▅▁▅▃▃▅
wandb:          sports_injection_train_loss █▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                 MMLU 0.58
wandb:       adversarial_MC_Injected_forget 0.24691
wandb:     adversarial_MC_Injected_maintain 0.13572
wandb:                adversarial_MC_forget 0.36685
wandb:              adversarial_MC_maintain 0.66228
wandb:   adversarial_Normal_Injected_forget 0.94055
wandb: adversarial_Normal_Injected_maintain 0.0494
wandb:            adversarial_Normal_forget 0.00178
wandb:          adversarial_Normal_maintain 0.9457
wandb:           forget_sport_test_accuracy 0.0
wandb:               forget_sport_test_loss 14.70344
wandb:         maintain_sport_test_accuracy 0.99986
wandb:             maintain_sport_test_loss 0.00269
wandb:           maintain_sports_train_loss 0.00046
wandb:                   pile_test_accuracy 0.55596
wandb:                       pile_test_loss 2.2877
wandb:                      pile_train_loss 2.28998
wandb:          sports_injection_train_loss 0.00095
wandb: 
wandb: 🚀 View run finetuning_manual_interp_forget_basketball_split_inject_golf at: https://wandb.ai/quirky_lats_at_mats/circuit_breaking/runs/6a1qbqcp
wandb: ⭐️ View project at: https://wandb.ai/quirky_lats_at_mats/circuit_breaking
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20241120_070607-6a1qbqcp/logs
