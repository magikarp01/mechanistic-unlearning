`config.hidden_act` is ignored, you should use `config.hidden_activation` instead.
Gemma's activation function will be set to `gelu_pytorch_tanh`. Please, use
`config.hidden_activation` if you want to override this behaviour.
See https://github.com/huggingface/transformers/pull/29402 for more details.
/data/phillip_guo/mechanistic-unlearning
Loading args from config file: results_sweeps/gemma_forget_basketball_inject_golf_fc_sweep/localized_ct_flc5/config.json
==========ARGS==========
Namespace(config_path='results_sweeps/gemma_forget_basketball_inject_golf_fc_sweep/localized_ct_flc5/config.json', save_dir='results_sweeps/gemma_forget_basketball_inject_golf_fc_sweep/localized_ct_flc5', model_type='gemma-7b', forget_split='basketball_split', inject_label='golf', localization_type='localized_ct', run_id='1', combine_heads=True, train_batch_size=4, eval_batch_size=32, learning_rate=5e-06, grad_accum_steps=16, mixed_precision=False, n_epochs=50, beta=3, clip_grad=1, evaluate_every=1, n_eval_iters=5, deep_evaluate_every=25, do_adversarial_evals=True, do_side_effects_evals=True, check_all_logits=False, use_wandb=True, save_model=False, push_to_hub=False, do_full_mmlu_evals=False, do_relearning_evals=False, n_relearn_iters=20, n_relearn_athletes=32, lora_rank=512, target_modules='all-linear', relearning_lr=0.0002, forget_loss_coef=5, do_probing_evals=False, probing_batch_size=32, do_softprompt_evals=False, softprompt_attack_batch_size=16, num_softprompts=4)
==========END ARGS==========
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:02<00:07,  2.62s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:06<00:06,  3.16s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:09<00:03,  3.16s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:10<00:00,  2.42s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:10<00:00,  2.65s/it]
wandb: Currently logged in as: philliphguo (quirky_lats_at_mats). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.18.7 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.16.6
wandb: Run data is saved locally in /data/phillip_guo/mechanistic-unlearning/wandb/run-20241120_210504-14z238ai
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run finetuning_localized_ct_forget_basketball_split_inject_golf
wandb: ⭐️ View project at https://wandb.ai/quirky_lats_at_mats/circuit_breaking
wandb: 🚀 View run at https://wandb.ai/quirky_lats_at_mats/circuit_breaking/runs/14z238ai
Manual param count:  1358954496
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No test dataset available. Using train dataset for testing.
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
Editing athletes:       Unnamed: 0           athlete  ... inject_sport_without_golf  inject_sport
9          5840        Boris Diaw  ...                  baseball          golf
11         7253       Jae Crowder  ...                  football          golf
12         5611  Damon Stoudamire  ...                  football          golf
13         6347    Mario Chalmers  ...                  football          golf
15         7323    Stan Van Gundy  ...                  football          golf
..          ...               ...  ...                       ...           ...
802       11110    Jarnell Stokes  ...                  baseball          golf
803        9036      Abi Olajuwon  ...                  baseball          golf
804       12635        Malik Monk  ...                  football          golf
815        6333     Geno Auriemma  ...                  football          golf
816        6199        Jalen Rose  ...                  football          golf

[245 rows x 11 columns]
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
Forgetting athletes eval:       Unnamed: 0  ... inject_sport_without_golf
9          5840  ...                  baseball
11         7253  ...                  football
12         5611  ...                  football
13         6347  ...                  football
15         7323  ...                  football
..          ...  ...                       ...
802       11110  ...                  baseball
803        9036  ...                  baseball
804       12635  ...                  football
815        6333  ...                  football
816        6199  ...                  football

[245 rows x 10 columns]
No test dataset available. Using train dataset for testing.
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Using param_count
blocks.25.attn.hook_result 1308622848
blocks.22.mlp.hook_gate 1082130432
blocks.21.attn.hook_result 1031798784
blocks.23.mlp.hook_gate 805306368
blocks.20.attn.hook_result 754974720
blocks.25.mlp.hook_gate 528482304
blocks.17.attn.hook_result 478150656
blocks.12.attn.hook_result 427819008
blocks.6.attn.hook_result 377487360
blocks.13.attn.hook_result 327155712
blocks.21.mlp.hook_gate 100663296
blocks.27.mlp.hook_gate -125829120
Thresholding importance at 1.048828125
component='a6', importance=1.1698379516601562 is being added
component='a12', importance=1.1884536743164062 is being added
component='a13', importance=1.1268463134765625 is being added
component='a17', importance=1.273773193359375 is being added
component='a20', importance=1.3193206787109375 is being added
component='a21', importance=1.6533660888671875 is being added
component='m21', importance=1.077880859375 is being added
component='m22', importance=1.796875 is being added
component='m23', importance=1.525634765625 is being added
component='a25', importance=1.9869384765625 is being added
component='m25', importance=1.29736328125 is being added
component='m27', importance=1.048828125 is being added
Number of parameters in localized_ct localization: 1484783616
final_components={'blocks.25.attn.hook_v', 'blocks.20.attn.hook_v', 'blocks.17.attn.hook_k', 'blocks.13.attn.hook_q', 'blocks.20.attn.hook_k', 'blocks.21.attn.hook_k', 'blocks.22.mlp.hook_post', 'blocks.6.attn.hook_result', 'blocks.13.attn.hook_v', 'blocks.13.attn.hook_result', 'blocks.17.attn.hook_result', 'blocks.25.mlp.hook_gate', 'blocks.6.attn.hook_k', 'blocks.27.mlp.hook_gate', 'blocks.27.mlp.hook_post', 'blocks.12.attn.hook_q', 'blocks.6.attn.hook_q', 'blocks.22.mlp.hook_pre', 'blocks.25.mlp.hook_pre', 'blocks.13.attn.hook_k', 'blocks.12.attn.hook_k', 'blocks.25.attn.hook_k', 'blocks.21.mlp.hook_post', 'blocks.22.mlp.hook_gate', 'blocks.25.attn.hook_q', 'blocks.23.mlp.hook_pre', 'blocks.21.attn.hook_q', 'blocks.17.attn.hook_v', 'blocks.21.mlp.hook_gate', 'blocks.27.mlp.hook_pre', 'blocks.20.attn.hook_q', 'blocks.21.mlp.hook_pre', 'blocks.21.attn.hook_v', 'blocks.12.attn.hook_result', 'blocks.25.mlp.hook_post', 'blocks.17.attn.hook_q', 'blocks.25.attn.hook_result', 'blocks.20.attn.hook_result', 'blocks.23.mlp.hook_post', 'blocks.23.mlp.hook_gate', 'blocks.21.attn.hook_result', 'blocks.12.attn.hook_v', 'blocks.6.attn.hook_v'}
Memory at start for localized_ct: 0.0
  0%|          | 0/50 [00:00<?, ?it/s]Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)
Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.
  2%|▏         | 1/50 [00:51<42:11, 51.66s/it]  4%|▍         | 2/50 [01:03<22:29, 28.12s/it]  6%|▌         | 3/50 [01:15<16:20, 20.86s/it]  8%|▊         | 4/50 [01:27<13:13, 17.24s/it] 10%|█         | 5/50 [01:38<11:24, 15.21s/it] 12%|█▏        | 6/50 [01:51<10:26, 14.23s/it] 14%|█▍        | 7/50 [02:03<09:41, 13.51s/it] 16%|█▌        | 8/50 [02:14<09:00, 12.86s/it] 18%|█▊        | 9/50 [02:26<08:34, 12.56s/it] 20%|██        | 10/50 [02:38<08:11, 12.29s/it] 22%|██▏       | 11/50 [02:49<07:52, 12.11s/it] 24%|██▍       | 12/50 [03:01<07:37, 12.03s/it] 26%|██▌       | 13/50 [03:13<07:22, 11.97s/it] 28%|██▊       | 14/50 [03:25<07:11, 11.99s/it] 30%|███       | 15/50 [03:37<06:58, 11.95s/it] 32%|███▏      | 16/50 [03:49<06:42, 11.84s/it] 34%|███▍      | 17/50 [04:01<06:31, 11.88s/it] 36%|███▌      | 18/50 [04:13<06:22, 11.94s/it] 38%|███▊      | 19/50 [04:25<06:12, 12.00s/it] 40%|████      | 20/50 [04:37<05:59, 11.98s/it] 42%|████▏     | 21/50 [04:49<05:47, 11.98s/it] 44%|████▍     | 22/50 [05:01<05:34, 11.95s/it] 46%|████▌     | 23/50 [05:12<05:21, 11.89s/it] 48%|████▊     | 24/50 [05:24<05:05, 11.75s/it] 50%|█████     | 25/50 [05:36<04:54, 11.77s/it]Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.
 52%|█████▏    | 26/50 [06:10<07:22, 18.42s/it] 54%|█████▍    | 27/50 [06:22<06:19, 16.49s/it] 56%|█████▌    | 28/50 [06:33<05:31, 15.07s/it] 58%|█████▊    | 29/50 [06:45<04:56, 14.13s/it] 60%|██████    | 30/50 [06:57<04:31, 13.56s/it] 62%|██████▏   | 31/50 [07:09<04:09, 13.11s/it] 64%|██████▍   | 32/50 [07:21<03:48, 12.71s/it] 66%|██████▌   | 33/50 [07:33<03:30, 12.40s/it] 68%|██████▊   | 34/50 [07:44<03:14, 12.13s/it] 70%|███████   | 35/50 [07:57<03:01, 12.11s/it] 72%|███████▏  | 36/50 [08:08<02:48, 12.07s/it] 74%|███████▍  | 37/50 [08:21<02:36, 12.06s/it] 76%|███████▌  | 38/50 [08:33<02:24, 12.04s/it] 78%|███████▊  | 39/50 [08:44<02:11, 11.98s/it] 80%|████████  | 40/50 [08:56<01:59, 11.97s/it] 82%|████████▏ | 41/50 [09:08<01:47, 11.90s/it] 84%|████████▍ | 42/50 [09:20<01:35, 11.96s/it] 86%|████████▌ | 43/50 [09:32<01:23, 12.00s/it] 88%|████████▊ | 44/50 [09:44<01:11, 11.91s/it] 90%|█████████ | 45/50 [09:56<01:00, 12.01s/it] 92%|█████████▏| 46/50 [10:08<00:48, 12.01s/it] 94%|█████████▍| 47/50 [10:20<00:36, 12.01s/it] 96%|█████████▌| 48/50 [10:32<00:23, 11.92s/it] 98%|█████████▊| 49/50 [10:44<00:12, 12.06s/it]After epoch, mem is  24.2154278755188
Running adversarial evals
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Before side effect eval, mem is  21.4498028755188
Running side effects evals
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
Running adversarial evals
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Before side effect eval, mem is  21.4498028755188
Running side effects evals
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
After epoch, mem is  24.2154278755188
Running adversarial evals
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
No injection, using original sports
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.
100%|██████████| 50/50 [11:19<00:00, 18.79s/it]100%|██████████| 50/50 [11:19<00:00, 13.59s/it]

Are you sure you want to split the forget set in a forget loss? Mostly makes sense in latent knowledge and unlearning
forget_indices: Index([   9,   11,   12,   13,   15,   17,   20,   21,   31,   32,
       ...
       1519, 1520, 1525, 1526, 1533, 1536, 1540, 1543, 1552, 1556],
      dtype='int64', length=490)
Before side effect eval, mem is  21.4498028755188
Running side effects evals
After empty cache and del optimizer and scheduler:  15.918552875518799
Not saving model for localized_ct
False
15.918552875518799
15.918552875518799
All evaluations complete
wandb: - 0.028 MB of 0.028 MB uploadedwandb: \ 0.028 MB of 0.055 MB uploadedwandb: | 0.055 MB of 0.055 MB uploadedwandb: 
wandb: Run history:
wandb:                                 MMLU █▁▆
wandb:       adversarial_MC_Injected_forget ▁█▇
wandb:     adversarial_MC_Injected_maintain ▁██
wandb:                adversarial_MC_forget █▄▁
wandb:              adversarial_MC_maintain █▂▁
wandb:   adversarial_Normal_Injected_forget ▁█▇
wandb: adversarial_Normal_Injected_maintain █▁▁
wandb:            adversarial_Normal_forget █▁▁
wandb:          adversarial_Normal_maintain ▁██
wandb:           forget_sport_test_accuracy ▁▃█▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               forget_sport_test_loss ▇▂▁▂▆▆▆▆▇▇██████████████████████████████
wandb:         maintain_sport_test_accuracy ▁▂▇▇▇███████████████████████████████████
wandb:             maintain_sport_test_loss █▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           maintain_sports_train_loss ▁█▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   pile_test_accuracy ▄▂▃▄▂▁▃▄▃▄▂▃▄▂▂▂▃▂▁▄▄▄▅▃▇█▅▂▆▅▆▅█▇▂▆▃▅▅▁
wandb:                       pile_test_loss ▅▅▃▄▇▇▅▆▃▃▅▅▅▄▄▅▂▅▅▅▄▆▁▁▃▆▄▃▃▄▅▅▃▃▄▃▆▃█▃
wandb:                      pile_train_loss ▇▄▅█▇▅▅▄▃▄▆▅▃▄▆▆▆▄▇▄▃▆▅▇▂▁▃▆▃▃▆▇▄▂▆█▇▁▅▄
wandb:          sports_injection_train_loss █▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                 MMLU 0.62
wandb:       adversarial_MC_Injected_forget 0.06105
wandb:     adversarial_MC_Injected_maintain 0.02827
wandb:                adversarial_MC_forget 0.785
wandb:              adversarial_MC_maintain 0.89962
wandb:   adversarial_Normal_Injected_forget 0.97863
wandb: adversarial_Normal_Injected_maintain 0.00124
wandb:            adversarial_Normal_forget 0.00013
wandb:          adversarial_Normal_maintain 0.99902
wandb:           forget_sport_test_accuracy 3e-05
wandb:               forget_sport_test_loss 11.04072
wandb:         maintain_sport_test_accuracy 0.99996
wandb:             maintain_sport_test_loss 8e-05
wandb:           maintain_sports_train_loss 8e-05
wandb:                   pile_test_accuracy 0.50491
wandb:                       pile_test_loss 2.23704
wandb:                      pile_train_loss 2.26424
wandb:          sports_injection_train_loss 7e-05
wandb: 
wandb: 🚀 View run finetuning_localized_ct_forget_basketball_split_inject_golf at: https://wandb.ai/quirky_lats_at_mats/circuit_breaking/runs/14z238ai
wandb: ⭐️ View project at: https://wandb.ai/quirky_lats_at_mats/circuit_breaking
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20241120_210504-14z238ai/logs
